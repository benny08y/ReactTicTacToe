{"version":3,"sources":["index.js"],"names":["Square","props","className","onClick","value","Board","i","this","squares","board","num","row","j","push","renderSquare","drawBoard","React","Component","Game","state","history","Array","fill","coordinate","active","moves","stepNumber","xIsNext","slice","current","length","calculateWinner","clearActive","setState","concat","step","reverse","status","winner","map","desc","0","1","2","3","4","5","6","7","8","getCoordinate","jumpTo","drawCurrent","tie","console","log","style","color","float","handleClick","sort","lines","every","a","b","c","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.09981584.chunk.js","sourcesContent":["import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport './index.css'\r\n\r\n// class Square extends React.Component {\r\n//     render() {\r\n//         return (\r\n//         <button\r\n//             className=\"square\"\r\n//             onClick={() => this.props.onClick()}\r\n//         >\r\n//             {this.props.value}\r\n//         </button>\r\n//         );\r\n//     }\r\n// }\r\n\r\nfunction Square(props) {\r\n    return(\r\n        <button \r\n            className=\"square\" \r\n            onClick={props.onClick}>\r\n            {props.value}\r\n        </button>\r\n    );\r\n}\r\nclass Board extends React.Component {\r\n\r\n    renderSquare(i) {\r\n        return (\r\n            <Square \r\n                value= {this.props.squares[i]}\r\n                onClick={ () => this.props.onClick(i)}\r\n            />\r\n        );\r\n    }\r\n\r\n    render() {\r\n        const drawBoard = () =>{\r\n            let board = []\r\n            let num = 0\r\n            for(let i=0; i<3; i++){\r\n                let row = []\r\n                for (let j = 1; j<=3; j++){\r\n                    row.push(this.renderSquare(num++));                    \r\n                }\r\n                board.push(\r\n                    <div className=\"board-row\">\r\n                        {row}\r\n                    </div>\r\n                );\r\n            }\r\n            return board\r\n        };\r\n        return (\r\n            <div>\r\n                {drawBoard()}                   \r\n            </div>\r\n        );\r\n    }\r\n}\r\n  \r\nclass Game extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            history: [{\r\n                squares: Array(9).fill(null),\r\n                coordinate: null,\r\n                active: true,\r\n                moves: 0,\r\n            }],\r\n            stepNumber: 0,\r\n            xIsNext: true,            \r\n        }\r\n    }\r\n\r\n    handleClick(i) {\r\n        const history =this.state.history.slice(0, this.state.stepNumber + 1);\r\n        const current = history[history.length - 1];\r\n        const squares = current.squares.slice();\r\n        const winner =calculateWinner(squares);\r\n        if (winner || squares[i]) {\r\n            return;\r\n        }\r\n        clearActive(history);\r\n        squares[i] = this.state.xIsNext ? 'X' : 'O';\r\n\r\n        let moves = current.moves;\r\n        moves++;\r\n\r\n        this.setState({\r\n            history: history.concat([{ \r\n                squares: squares,\r\n                coordinate: i,\r\n                active: true,\r\n                moves: moves,\r\n            }]),\r\n            stepNumber: history.length,\r\n            xIsNext: !this.state.xIsNext,\r\n        });\r\n    }\r\n\r\n    jumpTo(step) {\r\n        clearActive(this.state.history);\r\n        const history = this.state.history.slice();\r\n        history[step].active = true;\r\n        this.setState({\r\n            history: history,\r\n            stepNumber: step,\r\n            xIsNext: (step%2) === 0, \r\n        });\r\n    }\r\n\r\n    sort() {\r\n        const history = this.state.history.slice();\r\n        this.setState({\r\n            history: history.reverse(),\r\n        });\r\n    }\r\n\r\n    render() {\r\n        const history = this.state.history;\r\n        const current = history[this.state.stepNumber];\r\n        const winner = calculateWinner(current.squares);\r\n\r\n        // const moves = history.map((step, move) => {\r\n        const moves = history.map( (step, moves) => {\r\n            let desc = step.moves ? \r\n                'Go to move #' + step.moves + ' ' + getCoordinate(step.coordinate):\r\n                'Go to game start (column, row)';\r\n            return (\r\n                <li key={moves}>\r\n                    <button onClick={ () => this.jumpTo(moves)}>                        \r\n                        {step.active ? <b>{desc}</b> : desc}\r\n                    </button>\r\n                </li>\r\n            );\r\n        });\r\n\r\n        let status;\r\n        let drawCurrent = current.squares.slice();\r\n        if (winner) {\r\n            if (winner.tie) {\r\n                status = 'Draw. No one wins.'\r\n            } else {\r\n                status = 'Winner: ' + winner.winner + ' ' + winner.squares;\r\n                console.log(current.squares);\r\n                for(const i in winner.squares){\r\n                    let winnerStyle = { color: 'blue', float: 'right'};\r\n                    drawCurrent[winner.squares[i]] = \r\n                        <button \r\n                            style={winnerStyle}\r\n                            className=\"square\" \r\n                            >\r\n                            {winner.winner}\r\n                        </button>;\r\n                }\r\n            }  \r\n        } else {\r\n            status = 'Next player: ' + (this.state.xIsNext ? 'X' : 'O');\r\n        }\r\n\r\n        return (\r\n        <div className=\"game\">\r\n            <div className=\"game-board\">\r\n                <Board                \r\n                    squares={drawCurrent}\r\n                    onClick={ (i) => this.handleClick(i) }\r\n                />\r\n            </div>\r\n            <div className=\"game-info\">\r\n            <div>{ status }</div>             \r\n            <button onClick={ ()=> this.sort()}>Sort</button>\r\n            <ol>{moves}</ol>\r\n            </div>\r\n        </div>\r\n        );\r\n    }\r\n}\r\n\r\nfunction clearActive(history) {\r\n    for (const i in history){\r\n        history[i].active = false;\r\n    }\r\n    return history\r\n}\r\n\r\nfunction getCoordinate(i) {\r\n    let coordinates = {\r\n        0: \"(1, 1)\",\r\n        1: \"(2, 1)\",\r\n        2: \"(3, 1)\",\r\n        3: \"(1, 2)\",\r\n        4: \"(2, 2)\",\r\n        5: \"(3, 2)\",\r\n        6: \"(1, 3)\",\r\n        7: \"(2, 3)\",\r\n        8: \"(3, 3)\",\r\n    }\r\n    return coordinates[i]\r\n}\r\n\r\nfunction calculateWinner(squares) {\r\n    const lines = [\r\n        [0, 1, 2],\r\n        [3, 4, 5],\r\n        [6, 7, 8],\r\n        [0, 3, 6],\r\n        [1, 4, 7],\r\n        [2, 5, 8],\r\n        [0, 4, 8],\r\n        [2, 4, 6],\r\n    ];\r\n    let tie = squares.every( (i)=>{ \r\n        return i != null;\r\n    });    \r\n    for (let i = 0; i < lines.length; i++) {\r\n        const [a, b, c] = lines[i];\r\n        if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\r\n            return {\r\n                winner: squares[a],\r\n                squares: lines[i],\r\n            };\r\n        }\r\n        if (tie) {\r\n            return {tie: tie} \r\n        }\r\n    }     \r\n    return null ;\r\n}\r\n// ========================================\r\n\r\nReactDOM.render(\r\n    <Game />,\r\n    document.getElementById('root')\r\n);\r\n\r\n\r\n  "],"sourceRoot":""}